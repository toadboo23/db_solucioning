# Versión de PRODUCCIÓN - docker-compose.prod.yml
# Para usar: docker-compose -f docker-compose.prod.yml up -d

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: employee_management_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: employee_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_secure_password}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"  # Permite acceso externo
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres.conf:/etc/postgresql/postgresql.conf  # Configuración personalizada
    networks:
      - employee_network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: employee_management_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-change_this_secure_password}@postgres:5432/employee_management
      SESSION_SECRET: ${SESSION_SECRET:-change-this-super-secret-key-in-production}
      PORT: 5173
    ports:
      - "${BACKEND_PORT:-5173}:5173"
    depends_on:
      - postgres
    networks:
      - employee_network
    command: npm run start

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: employee_management_frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${API_URL:-http://localhost:5173}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    networks:
      - employee_network
    command: npm run start

volumes:
  postgres_data:

networks:
  employee_network:
    driver: bridge