# Versión de PRODUCCIÓN optimizada
# Configuración específica para VPS con recursos limitados

version: '3.8'

services:
  # PostgreSQL Database - Optimizado
  postgres:
    image: postgres:16-alpine
    container_name: solucioning_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: employee_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: SolucioningSecurePass2024!
      POSTGRES_HOST_AUTH_METHOD: trust
      # Optimizaciones de PostgreSQL
      POSTGRES_INITDB_ARGS: "--auth-host=trust"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - solucioning_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Límites de recursos
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Backend API - Optimizado
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: solucioning_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:SolucioningSecurePass2024!@postgres:5432/employee_management
      SESSION_SECRET: SolucioningSecretKey2024!
      PORT: 5173
      # Optimizaciones de Node.js
      NODE_OPTIONS: "--max-old-space-size=512"
    ports:
      - "5173:5173"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - solucioning_network
    # Límites de recursos
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Frontend - Optimizado
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: solucioning_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - solucioning_network
    # Límites de recursos
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local

networks:
  solucioning_network:
    driver: bridge 